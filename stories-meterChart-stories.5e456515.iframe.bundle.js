"use strict";(self.webpackChunkreact_webpack_project=self.webpackChunkreact_webpack_project||[]).push([[908],{"./src/stories/meterChart.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MeterChart:()=>MeterChart,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),gk_chart__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/gk-chart/dist/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const MeterChartContainer=styled_components__WEBPACK_IMPORTED_MODULE_3__.ZP.div`
  width: 100%;
  height: 300px;  
`,meterData={config:{title:"Meter Gauge Chart",chartType:"meter-chart",printEnable:!0},data:[{chartColor:"#29c3be",datapoints:[{label:"Poor",y:50,color:"#29c3be"},{label:"Blw Avg",y:25,color:"#29c3be"},{label:"Average",y:25,color:"#00ff00"},{label:"Abv Avg",y:35,color:"#00ff00"},{label:"Exceed",y:10,color:"#00ff00"}],dataval:77}]},MeterChart=()=>((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{(0,gk_chart__WEBPACK_IMPORTED_MODULE_1__.GkMeterChart)({id:"meterChartId",data:meterData})}),[]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MeterChartContainer,{id:"meterChartId"})})),__WEBPACK_DEFAULT_EXPORT__={title:"Components/MeterChart",component:MeterChart,tags:["autodocs"],decorators:[Story=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{margin:"1em",padding:"2em",background:"#f8f7f7"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Story,{})})]};MeterChart.parameters={docs:{source:{code:'\nimport React, { useEffect } from "react";\nimport {GkMeterChart} from \'gk-chart\';\n\nconst meterData = {\n    "config": {\n        "title": "Meter Gauge Chart",\n        "chartType": "meter-chart",\n        "printEnable": true\n    },\n    "data": [ /*Give as required data in given formate, syntax error with json will cause of error in charts*/ {\n        "chartColor": "#29c3be",\n        "datapoints": [{\n            "label": "Poor",\n            "y": 50,\n            "color": "#29c3be"\n        }, {\n            "label": "Blw Avg",\n            "y": 25,\n            "color": "#29c3be"\n        }, {\n            "label": "Average",\n            "y": 25,\n            "color": "#00ff00"\n        }, {\n            "label": "Abv Avg",\n            "y": 35,\n            "color": "#00ff00"\n        }, {\n            "label": "Exceed",\n            "y": 10,\n            "color": "#00ff00"\n        }],\n        dataval: 77\n    }]\n};\n\nexport const MeterChart = () => {\n\n    useEffect(() => {\n        GkMeterChart({\n            id: "meterChartId",\n            data: meterData\n        })\n    }, []);\n\n    return (\n        <>\n            <div id="meterChartId" style={{width: "100%", height: "500px"}}></div>\n        </>\n    );\n}\n'}}},MeterChart.parameters={...MeterChart.parameters,docs:{...MeterChart.parameters?.docs,source:{originalSource:'() => {\n  useEffect(() => {\n    GkMeterChart({\n      id: "meterChartId",\n      data: meterData\n    });\n  }, []);\n  return <>\n            <MeterChartContainer id="meterChartId" />\n        </>;\n}',...MeterChart.parameters?.docs?.source}}};const __namedExportsOrder=["MeterChart"]}}]);